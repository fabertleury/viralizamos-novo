import { createClient } from '@/lib/supabase/server';
import { LinkFormatter } from '../utils/linkFormatter';
import { Logger } from '../utils/logger';
import axios from 'axios';

/**
 * Servi√ßo para envio de pedidos espec√≠ficos para cada tipo de servi√ßo do provedor
 */
export class ProviderOrderService {
  private supabase;
  private linkFormatter;
  private logger;

  constructor() {
    this.supabase = createClient();
    this.linkFormatter = new LinkFormatter();
    this.logger = new Logger('ProviderOrderService');
  }

  /**
   * Atraso auxiliar (sleep) para espa√ßar os pedidos
   */
  private async delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * Envia pedidos para o provedor com base no tipo de servi√ßo
   * @param params Par√¢metros da transa√ß√£o e servi√ßo
   * @returns Resultado dos pedidos enviados
   */
  async sendOrders(params: {
    transactionId: string;
    serviceId: string;
    serviceType: string;
    providerId: string;
    posts: Array<{
      id: string;
      code?: string;
      url?: string;
      type?: string;
      username?: string;
      quantity?: number;
    }>;
    quantity: number;
    providerKey?: string;
    providerApiUrl?: string;
    externalServiceId?: string;
  }) {
    try {
      const { 
        transactionId, 
        serviceId, 
        serviceType, 
        providerId, 
        posts,
        quantity, 
        providerKey,
        providerApiUrl,
        externalServiceId
      } = params;

      // Buscar detalhes do provedor se n√£o fornecidos
      let apiKey = providerKey;
      let apiUrl = providerApiUrl;
      let serviceExternalId = externalServiceId;

      if (!apiKey || !apiUrl || !serviceExternalId) {
        this.logger.info(`Buscando detalhes do provedor ${providerId} e servi√ßo ${serviceId}`);
        
        // Buscar dados do provedor
        const { data: provider, error: providerError } = await this.supabase
          .from('providers')
          .select('*')
          .eq('id', providerId)
          .single();
          
        if (providerError || !provider) {
          throw new Error(`Erro ao buscar provedor: ${providerError?.message || 'Provedor n√£o encontrado'}`);
        }
        
        // Buscar dados do servi√ßo
        const { data: service, error: serviceError } = await this.supabase
          .from('services')
          .select('*')
          .eq('id', serviceId)
          .single();
          
        if (serviceError || !service) {
          throw new Error(`Erro ao buscar servi√ßo: ${serviceError?.message || 'Servi√ßo n√£o encontrado'}`);
        }
        
        apiKey = provider.api_key;
        apiUrl = provider.api_url;
        serviceExternalId = service.external_id;
        
        if (!apiKey || !apiUrl) {
          throw new Error('Provedor n√£o possui chave API ou URL configurada');
        }
        
        if (!serviceExternalId) {
          throw new Error('Servi√ßo n√£o possui ID externo configurado');
        }
      }

      // Array para armazenar resultados de todos os pedidos
      const results: Array<{
        success: boolean;
        orderId?: string;
        externalOrderId?: string;
        postId?: string;
        postCode?: string;
        error?: string;
      }> = [];

      // CORRE√á√ÉO: Verificar se estamos lidando com um servi√ßo de curtidas mas recebendo perfis
      // Se for servi√ßo de curtidas/etc. mas s√≥ temos URLs de perfil, vamos tratar como seguidores
      if (
        ['curtidas', 'comentarios', 'visualizacao', 'reels'].includes(serviceType.toLowerCase()) && 
        posts.length > 0 && 
        posts.every(post => post.url && post.url.includes('instagram.com/') && 
                            !post.url.includes('/p/') && !post.url.includes('/reel/'))
      ) {
        this.logger.warn(`‚ö†Ô∏è Servi√ßo de ${serviceType} detectado mas todos os posts s√£o perfis. Tratando como servi√ßo de seguidores.`);
        
        // ERRO CR√çTICO: N√£o devemos permitir este comportamento para servi√ßos de curtidas/etc.
        throw new Error(`Erro de valida√ß√£o: URLs de perfil n√£o s√£o v√°lidas para servi√ßo de ${serviceType}. Verifique os posts enviados e certifique-se de que s√£o URLs de posts ou reels v√°lidos.`);
      }

      // Diferentes estrat√©gias de envio conforme o tipo de servi√ßo
      switch (serviceType.toLowerCase()) {
        case 'seguidores':
          // Para servi√ßos de seguidores, enviamos apenas um pedido com o nome de usu√°rio
          // Verificar se temos posts v√°lidos
          if (!posts || posts.length === 0) {
            throw new Error('Nenhum post/usu√°rio fornecido para servi√ßo de seguidores');
          }
          
          this.logger.info(`Processando servi√ßo de seguidores para ${posts[0].username || (posts[0].url ? 'URL: ' + posts[0].url : 'ID: ' + posts[0].id)}`);
          
          // Enviar pedido de seguidores (usando apenas o primeiro post)
          return await this.sendFollowersOrder({
            transactionId,
            serviceId,
            providerId,
            serviceExternalId,
            apiKey,
            apiUrl,
            post: posts[0], // Usamos apenas o primeiro post (que cont√©m o username)
            quantity
          });

        case 'curtidas':
        case 'comentarios':
        case 'visualizacao':
        case 'reels': // Incluir reels no mesmo tratamento
          // Para curtidas, coment√°rios, visualiza√ß√µes e reels, enviamos um pedido para cada item
          // Adicionando delay entre os pedidos
          
          // Logar todos os posts recebidos para debug
          this.logger.info(`üîç POSTS RECEBIDOS (${posts.length}): ${JSON.stringify(posts)}`);
          
          // VALIDA√á√ÉO PR√â-PROCESSAMENTO: Verificar se os posts s√£o v√°lidos para este tipo de servi√ßo
          const invalidPosts = posts.filter(post => {
            // Um post √© inv√°lido se:
            // 1. N√£o tem c√≥digo E
            // 2. Sua URL √© de perfil (n√£o cont√©m /p/ ou /reel/)
            return (!post.code && post.url && post.url.includes('instagram.com/') && 
                    !post.url.includes('/p/') && !post.url.includes('/reel/'));
          });

          if (invalidPosts.length > 0) {
            this.logger.error(`‚ö†Ô∏è Detectados ${invalidPosts.length} posts inv√°lidos para servi√ßo de ${serviceType}:`, 
              JSON.stringify(invalidPosts.map(p => ({url: p.url, code: p.code, id: p.id}))));
            throw new Error(`Erro de valida√ß√£o: ${invalidPosts.length} URLs de perfil enviadas para servi√ßo de ${serviceType}. Verifique os posts e certifique-se de que s√£o URLs de posts ou reels v√°lidos.`);
          }

          for (let i = 0; i < posts.length; i++) {
            const post = posts[i];
            try {
              // Logar detalhes do post atual (para entender de onde vem o 'virtual-')
              this.logger.info(`üîç PROCESSANDO POST ${i+1}: ${JSON.stringify(post)}`);
              
              // Verificar se temos um post v√°lido para servi√ßos de curtidas/coment√°rios/visualiza√ß√µes
              if (!post || (!post.code && !post.url)) {
                this.logger.error(`Post inv√°lido para servi√ßo ${serviceType}: ${JSON.stringify(post)}`);
                results.push({
                  success: false,
                  postId: post?.id,
                  error: `Post inv√°lido: n√£o possui c√≥digo ou URL necess√°ria para servi√ßo de ${serviceType}`
                });
                continue; // Pular este post e ir para o pr√≥ximo
              }
              
              // Verificar se a URL √© de perfil (n√£o deve ser usado para curtidas/etc)
              if (post.url && post.url.includes('instagram.com/') && 
                  !post.url.includes('/p/') && !post.url.includes('/reel/')) {
                this.logger.warn(`URL de perfil detectada para servi√ßo de ${serviceType}: ${post.url}`);
                results.push({
                  success: false,
                  postId: post.id,
                  error: `URL de perfil n√£o √© v√°lida para servi√ßo de ${serviceType}`
                });
                continue; // Pular este post e ir para o pr√≥ximo
              }
              
              // Log para indicar o processamento do item atual (post ou reel)
              const isReel = post.type === 'reel' || (post.url && post.url.includes('/reel/'));
              this.logger.info(`Processando ${isReel ? 'reel' : 'post'} ${i+1} de ${posts.length}: ${post.code || post.id}`);
              
              // Verificar se o post possui uma quantidade espec√≠fica
              const postSpecificQuantity = post.quantity !== undefined && post.quantity !== null;
              
              // Log para mostrar a quantidade espec√≠fica do post, se dispon√≠vel
              if (postSpecificQuantity) {
                this.logger.info(`Post ${post.code || post.id} tem quantidade espec√≠fica: ${post.quantity}`);
              } else {
                this.logger.info(`Post ${post.code || post.id} n√£o tem quantidade espec√≠fica, usando total: ${quantity}`);
              }
              
              // Todos os tipos de servi√ßo agora usam o mesmo m√©todo sendPostOrder que verifica se √© post ou reel
              const result = await this.sendPostOrder({
                transactionId,
                serviceId,
                providerId,
                serviceExternalId,
                apiKey,
                apiUrl,
                post,
                quantity: post.quantity !== undefined ? post.quantity : Math.floor(quantity / posts.length), // Usar a quantidade espec√≠fica do post ou dividir pelo n√∫mero de posts
                serviceType
              });
              
              // Log adicional para debug do resultado
              this.logger.info(`Resultado do envio para o provedor: ${JSON.stringify(result)}`);
              
              results.push(result);
              
              // Adicionar delay de 50 segundos entre cada pedido (exceto para o √∫ltimo)
              if (i < posts.length - 1) {
                this.logger.info(`Aguardando 50 segundos antes de processar o pr√≥ximo item...`);
                await this.delay(50000); // 50 segundos em milissegundos
              }
            } catch (error) {
              this.logger.error(`Erro ao processar item ${i+1}: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
              this.logger.error(`Detalhes do post com erro: ${JSON.stringify({
                id: post?.id,
                code: post?.code,
                url: post?.url,
                type: post?.type
              })}`);
              
              results.push({
                success: false,
                postId: post?.id,
                postCode: post?.code,
                error: error instanceof Error ? error.message : 'Erro desconhecido'
              });
              
              // Mesmo em caso de erro, aguardar antes do pr√≥ximo para n√£o sobrecarregar o provedor
              if (i < posts.length - 1) {
                await this.delay(50000);
              }
            }
          }
          break;

        default:
          throw new Error(`Tipo de servi√ßo n√£o suportado: ${serviceType}`);
      }

      // Calcular status geral
      // const allSuccess = results.every(r => r.success);
      
      // Log adicional para debug dos resultados finais
      this.logger.info(`Resultados finais: ${JSON.stringify(results)}`);
      
      return results;
    } catch (error) {
      this.logger.error(`Erro ao processar pedidos: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
      
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };
    }
  }

  /**
   * Envia pedido para servi√ßo de seguidores
   */
  private async sendFollowersOrder(params: {
    transactionId: string;
    serviceId: string;
    providerId: string;
    serviceExternalId: string;
    apiKey: string;
    apiUrl: string;
    post: {
      id: string;
      code?: string;
      url?: string;
      username?: string;
      quantity?: number;
      hasQuantity?: boolean;
    };
    quantity: number;
  }) {
    const { 
      transactionId, 
      serviceId, 
      providerId, 
      serviceExternalId, 
      apiKey, 
      apiUrl, 
      post,
      quantity: defaultQuantity
    } = params;

    // Log para depura√ß√£o do post recebido
    this.logger.info(`Processando pedido de seguidores: ${JSON.stringify(post, null, 2)}`);

    // Valida√ß√£o b√°sica
    if (!post) {
      throw new Error('Post inv√°lido ou indefinido');
    }

    // Extrair o nome de usu√°rio usando o valor j√° dispon√≠vel ou da URL
    let username = post.username;
    
    // Se n√£o tiver username expl√≠cito mas tiver URL, extrair da URL
    if (!username && post.url) {
      // Tentar extrair username da URL
      const urlRegex = /instagram\.com\/([^\/\?]+)/;
      const match = post.url.match(urlRegex);
      
      if (match && match[1]) {
        username = match[1];
        this.logger.info(`Username extra√≠do da URL: ${username}`);
      } else {
        const urlParts = post.url.split('/');
        username = urlParts[urlParts.length - 1].replace('@', '');
      }
    }
    
    if (!username) {
      throw new Error(`Nome de usu√°rio n√£o encontrado para servi√ßo de seguidores: ${JSON.stringify(post)}`);
    }
    
    // Remover @ se existir e qualquer par√¢metro de URL
    username = username.replace('@', '').split('?')[0].split('#')[0];
    
    this.logger.info(`Enviando pedido de seguidores para usu√°rio: ${username}`);
    
    // Usar quantidade espec√≠fica se dispon√≠vel
    const followerQuantity = post.quantity !== undefined ? post.quantity : defaultQuantity;
    
    this.logger.info(`Quantidade para seguidores: ${followerQuantity}`);
    
    // Verificar pedido duplicado
    const { data: duplicateCheck, error: checkError } = await this.supabase.rpc(
      'check_duplicate_order',
      {
        p_transaction_id: transactionId,
        p_post_code: username, // Para seguidores, usamos o username como c√≥digo
        p_service_id: serviceId
      }
    );
    
    if (checkError) {
      this.logger.error(`Erro ao verificar duplicidade: ${checkError.message}`);
    } else if (duplicateCheck && duplicateCheck.has_duplicate) {
      this.logger.warn(`Pedido duplicado de seguidores detectado: ${duplicateCheck.message}`);
      
      return {
        success: false,
        error: duplicateCheck.message || 'Pedido duplicado detectado',
        duplicate: true,
        orderId: duplicateCheck.order_id,
        externalOrderId: duplicateCheck.external_order_id
      };
    }
    
    try {
      // CORRE√á√ÉO: Para servi√ßos de seguidores, enviamos APENAS o username, n√£o a URL completa
      // Construir os par√¢metros para a API do provedor
      const requestParams = new URLSearchParams({
        key: apiKey,
        action: 'add',
        service: serviceExternalId,
        link: username, // APENAS o username, n√£o a URL completa
        quantity: followerQuantity.toString()
      });
      
      // Salvar os dados da requisi√ß√£o para refer√™ncia
      const requestData = {
        action: 'add',
        service: serviceExternalId,
        link: username, // APENAS o username
        quantity: followerQuantity,
        target_username: username
      };
      
      this.logger.info(`Enviando pedido para o provedor: username=${username} com quantidade ${followerQuantity}`);
      
      // Enviar o pedido para o provedor
      const response = await axios.post(apiUrl, requestParams);
      
      // Validar a resposta do provedor
      if (!response.data || response.data.error) {
        throw new Error(`Erro do provedor: ${response.data?.error || 'Resposta inv√°lida'}`);
      }
      
      const externalOrderId = response.data.order || String(response.data.id) || `order-${Date.now()}`;
      
      // Construir a URL formatada para o perfil para refer√™ncia interna
      const profileUrl = `https://instagram.com/${username}`;
      
      // CORRE√á√ÉO: Tratar IDs vindos da tabela core_transaction_posts_v2
      // Como a tabela posts n√£o existe, vamos armazenar apenas nos metadados
      const actualPostId = null; // Sempre null para evitar erro de chave estrangeira
      
      // Registrar nos logs o ID original para refer√™ncia
      this.logger.info(`Usando post ID ${post.id} apenas nos metadados (sem salvar na refer√™ncia post_id)`);
      
      // Registrar o pedido no banco de dados
      const { data: order, error: orderError } = await this.supabase
        .from('core_orders')
        .insert({
          transaction_id: transactionId,
          post_id: actualPostId, // NULL para evitar viola√ß√£o de chave estrangeira
          service_id: serviceId,
          provider_id: providerId,
          external_order_id: externalOrderId,
          provider_order_id: externalOrderId,
          status: 'pending',
          quantity: followerQuantity,
          target_username: username,
          target_url: profileUrl, // Armazenar a URL do perfil para refer√™ncia
          metadata: {
            service_type: 'seguidores',
            username: username,
            original_post_id: post.id, // Armazenar o ID original nos metadados para refer√™ncia
            post_source: 'core_transaction_posts_v2', // Indicar a fonte do post
            providerRequestData: requestData,
            providerResponse: response.data
          }
        })
        .select()
        .single();
        
      if (orderError) {
        this.logger.error(`Erro ao registrar pedido: ${orderError.message}`);
        throw new Error(`Erro ao registrar pedido: ${orderError.message}`);
      }
      
      this.logger.success(`Pedido de seguidores registrado com sucesso: ${order.id} para ${username} (${followerQuantity} seguidores)`);
      
      return {
        success: true,
        orderId: order.id,
        externalOrderId,
        username,
        quantity: followerQuantity
      };
    } catch (error) {
      this.logger.error(`Erro ao enviar pedido de seguidores: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
      throw error;
    }
  }

  /**
   * Verifica se um pedido √© duplicado usando v√°rias verifica√ß√µes
   * @param postCode C√≥digo do post
   * @param serviceId ID do servi√ßo 
   * @param transactionId ID da transa√ß√£o
   * @param targetUrl URL alvo do pedido
   * @returns Objeto com informa√ß√µes de duplica√ß√£o, ou null se n√£o for duplicado
   */
  private async verifyDuplicateOrder(
    postCode: string, 
    serviceId: string, 
    transactionId: string, 
    targetUrl: string
  ) {
    // 1. Verificar via RPC (procedimento armazenado)
    const { data: duplicateCheck, error: checkError } = await this.supabase.rpc('check_duplicate_order', {
      p_transaction_id: transactionId,
      p_post_code: postCode,
      p_service_id: serviceId
    });
    
    if (checkError) {
      this.logger.error(`Erro ao verificar duplicidade via RPC: ${checkError.message}`);
    } else if (duplicateCheck && duplicateCheck.has_duplicate) {
      this.logger.warn(`Pedido duplicado detectado via RPC: ${duplicateCheck.message}`);
      
      return {
        duplicate: true,
        method: 'rpc',
        message: duplicateCheck.message || 'Pedido duplicado detectado',
        orderId: duplicateCheck.order_id,
        externalOrderId: duplicateCheck.external_order_id
      };
    }
    
    // 2. Verifica√ß√£o na tabela core_orders por URL diretamente
    if (targetUrl) {
      const { data: duplicateOrders } = await this.supabase
        .from('core_orders')
        .select('id, external_order_id, status, provider_order_id')
        .eq('service_id', serviceId)
        .eq('target_url', targetUrl)
        .not('status', 'eq', 'error')
        .order('created_at', { ascending: false })
        .limit(1);
        
      if (duplicateOrders && duplicateOrders.length > 0) {
        const duplicateOrder = duplicateOrders[0];
        this.logger.warn(`Pedido duplicado detectado via URL: ${targetUrl} para servi√ßo ${serviceId} (ID: ${duplicateOrder.id})`);
        
        return {
          duplicate: true,
          method: 'url',
          message: `Pedido duplicado: URL ${targetUrl} j√° processada anteriormente para este servi√ßo`,
          orderId: duplicateOrder.id,
          externalOrderId: duplicateOrder.external_order_id || duplicateOrder.provider_order_id
        };
      }
    }
    
    // 3. Verificar em core_processing_locks
    const lockKey = `post_${postCode}_service_${serviceId}`;
    const { data: lockData } = await this.supabase
      .from('core_processing_locks')
      .select('*')
      .eq('lock_key', lockKey)
      .maybeSingle(); // Usar maybeSingle em vez de single para evitar erro quando n√£o encontra
      
    if (lockData) {
      this.logger.warn(`Pedido bloqueado: encontrado bloqueio existente para post ${postCode} e servi√ßo ${serviceId}`);
      
      return {
        duplicate: true,
        method: 'lock',
        message: `Post ${postCode} bloqueado para processamento (j√° foi processado anteriormente)`,
        orderId: lockData.order_id
      };
    }
    
    // Nenhuma duplica√ß√£o encontrada
    return null;
  }

  /**
   * Envia pedido para servi√ßo de posts (curtidas, coment√°rios ou visualiza√ß√µes)
   */
  private async sendPostOrder(params: {
    transactionId: string;
    serviceId: string;
    providerId: string;
    serviceExternalId: string;
    apiKey: string;
    apiUrl: string;
    post: {
      id: string;
      code?: string;
      url?: string;
      type?: string;
      quantity?: number;
      hasQuantity?: boolean;
      username?: string;
    };
    quantity: number;
    serviceType: string;
  }) {
    const { 
      transactionId, 
      serviceId, 
      providerId, 
      serviceExternalId, 
      apiKey, 
      apiUrl, 
      post, 
      quantity: defaultQuantity,
      serviceType 
    } = params;

    // Logar o post recebido para depura√ß√£o
    this.logger.info(`Processando post: ${JSON.stringify(post, null, 2)}`);
    
    // Valida√ß√£o b√°sica
    if (!post) {
      throw new Error('Post inv√°lido ou indefinido');
    }
    
    // NOVA VERIFICA√á√ÉO: Se o URL √© de perfil e n√£o de post/reel e n√£o temos c√≥digo
    // (√â um caso onde enviamos URL de perfil para um servi√ßo de curtidas)
    if (post.url && post.url.includes('instagram.com/') && 
        !post.url.includes('/p/') && !post.url.includes('/reel/')) {
      
      this.logger.warn(`‚ö†Ô∏è URL de perfil detectada para servi√ßo de ${serviceType}: ${post.url}`);
      throw new Error(`Erro de valida√ß√£o: URLs de perfil n√£o s√£o v√°lidas para servi√ßo de ${serviceType}. √â necess√°rio fornecer URLs de posts/reels espec√≠ficos.`);
    }
    
    // Extrair c√≥digo do post da URL se n√£o estiver definido explicitamente
    let postCode = post.code;
    if (!postCode && post.url) {
      // Tenta extrair o c√≥digo da URL
      const match = post.url.match(/instagram\.com\/(?:p|reel)\/([^\/]+)/);
      if (match && match[1]) {
        postCode = match[1];
        this.logger.info(`C√≥digo de post extra√≠do da URL: ${postCode}`);
      }
    }
    
    if (!postCode) {
      this.logger.error(`Post n√£o possui c√≥digo e n√£o foi poss√≠vel extrair da URL: ${JSON.stringify(post)}`);
      throw new Error(`Post n√£o possui c√≥digo: ${JSON.stringify({
        id: post.id,
        url: post.url,
        username: post.username
      })}`);
    }
    
    // Verificar se √© um reel baseado no tipo ou na URL
    const isReel = post.type === 'reel' || (post.url && post.url.includes('/reel/'));
    
    // Se o post j√° tem URL, usar diretamente; caso contr√°rio, construir
    let targetUrl = post.url;
    if (!targetUrl) {
      // Construir URL baseada no tipo e c√≥digo
      targetUrl = isReel
        ? `https://instagram.com/reel/${postCode}/`
        : `https://instagram.com/p/${postCode}/`;
    }
    
    // Garantir que a URL n√£o tenha "www."
    targetUrl = targetUrl.replace('www.', '');
    
    this.logger.info(`Usando post: c√≥digo=${postCode}, tipo=${isReel ? 'reel' : 'post'}, URL=${targetUrl}`);
    
    // Usar quantidade espec√≠fica se dispon√≠vel, caso contr√°rio usar a quantidade passada
    const postQuantity = post.quantity !== undefined && post.quantity !== null 
      ? post.quantity 
      : defaultQuantity;
    
    this.logger.info(`Quantidade para post ${postCode}: ${postQuantity} (espec√≠fica do post: ${post.quantity !== undefined ? 'sim' : 'n√£o'})`);
    
    // Verificar duplica√ß√£o usando o m√©todo centralizado
    const duplicateInfo = await this.verifyDuplicateOrder(postCode, serviceId, transactionId, targetUrl);
    
    if (duplicateInfo) {
      this.logger.warn(`Pedido duplicado detectado (m√©todo: ${duplicateInfo.method}): ${duplicateInfo.message}`);
      
      // Registrar bloqueio permanente (se ainda n√£o existir)
      if (duplicateInfo.orderId) {
        await this.registerLock(postCode, serviceId, duplicateInfo.orderId);
      }
      
      return {
        success: false,
        error: duplicateInfo.message,
        duplicate: true,
        postId: post.id,
        postCode: postCode,
        orderId: duplicateInfo.orderId,
        externalOrderId: duplicateInfo.externalOrderId
      };
    }
    
    try {
      // Construir os par√¢metros para a API do provedor
      const requestParams = new URLSearchParams({
        key: apiKey,
        action: 'add',
        service: serviceExternalId,
        link: targetUrl,
        quantity: postQuantity.toString()
      });
      
      // Salvar os dados da requisi√ß√£o para refer√™ncia
      const requestData = {
        action: 'add',
        service: serviceExternalId,
        link: targetUrl,
        quantity: postQuantity,
        post_code: postCode
      };
      
      this.logger.info(`Enviando pedido para o provedor: ${targetUrl} com quantidade ${postQuantity}`);
      
      // Enviar o pedido para o provedor
      const response = await axios.post(apiUrl, requestParams);
      
      // Validar a resposta do provedor
      if (!response.data || response.data.error) {
        throw new Error(`Erro do provedor: ${response.data?.error || 'Resposta inv√°lida'}`);
      }
      
      const externalOrderId = response.data.order || String(response.data.id) || `order-${Date.now()}`;
      
      // CORRE√á√ÉO: Tratar IDs vindos da tabela core_transaction_posts_v2
      // Como a tabela posts n√£o existe, vamos armazenar apenas nos metadados
      const actualPostId = null; // Sempre null para evitar erro de chave estrangeira
      
      // Registrar nos logs o ID original para refer√™ncia
      this.logger.info(`Usando post ID ${post.id} apenas nos metadados (sem salvar na refer√™ncia post_id)`);
      
      // Registrar o pedido no banco de dados
      const { data: order, error: orderError } = await this.supabase
        .from('core_orders')
        .insert({
          transaction_id: transactionId,
          post_id: actualPostId, // NULL para evitar viola√ß√£o de chave estrangeira
          service_id: serviceId,
          provider_id: providerId,
          external_order_id: externalOrderId,
          provider_order_id: externalOrderId,
          status: 'pending',
          quantity: postQuantity,
          target_url: targetUrl,
          metadata: {
            service_type: serviceType,
            post_code: postCode,
            post_type: post.type === 'reel' || (post.url && post.url.includes('/reel/')) ? 'reel' : 'post',
            original_post_id: post.id, // Armazenar o ID original nos metadados para refer√™ncia
            post_source: 'core_transaction_posts_v2', // Indicar a fonte do post
            providerRequestData: requestData,
            providerResponse: response.data
          }
        })
        .select()
        .single();
        
      if (orderError) {
        this.logger.error(`Erro ao registrar pedido: ${orderError.message}`);
        throw new Error(`Erro ao registrar pedido: ${orderError.message}`);
      }
      
      // Registrar bloqueio permanente para evitar duplica√ß√£o futura
      await this.registerLock(postCode, serviceId, order.id);
      
      this.logger.success(`Pedido de ${serviceType} registrado com sucesso: ${order.id} para ${targetUrl} (${postQuantity} ${serviceType})`);
      
      return {
        success: true,
        orderId: order.id,
        externalOrderId,
        postId: post.id,
        postCode,
        quantity: postQuantity
      };
    } catch (error) {
      this.logger.error(`Erro ao enviar pedido: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
      throw error;
    }
  }

  /**
   * Registra um bloqueio permanente para um post e servi√ßo
   * @param postCode C√≥digo do post
   * @param serviceId ID do servi√ßo
   * @param orderId ID do pedido que causou o bloqueio
   */
  async registerLock(postCode: string, serviceId: string, orderId: string) {
    try {
      // Criar a chave de bloqueio
      const lockKey = `post_${postCode}_service_${serviceId}`;
    
      // Verificar se j√° existe um bloqueio para este post e servi√ßo
      const { data: existingLock } = await this.supabase
        .from('core_processing_locks')
        .select('*')
        .eq('lock_key', lockKey)
        .maybeSingle(); // Usar maybeSingle em vez de single para evitar erro quando n√£o encontra
      
      if (existingLock) {
        this.logger.info(`Bloqueio j√° existe para post ${postCode} e servi√ßo ${serviceId}`);
        return;
      }
      
      // Calcular data de expira√ß√£o (1 ano)
      const expiresAt = new Date();
      expiresAt.setFullYear(expiresAt.getFullYear() + 1);
      
      // Registrar bloqueio permanente usando a estrutura correta da tabela
      const { error } = await this.supabase
        .from('core_processing_locks')
        .insert({
          transaction_id: orderId, // Usando orderId como transaction_id para compatibilidade
          lock_key: lockKey,
          locked_by: 'provider-order-service',
          locked_at: new Date().toISOString(),
          order_id: orderId,
          expires_at: expiresAt.toISOString(),
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          metadata: {
            post_code: postCode,
            service_id: serviceId,
            reason: 'Pedido processado - bloqueio permanente para evitar duplica√ß√£o'
          }
        });
      
      if (error) {
        this.logger.error(`Erro ao registrar bloqueio: ${error.message}`);
      } else {
        this.logger.success(`Bloqueio registrado com sucesso para post ${postCode} e servi√ßo ${serviceId}`);
      }
    } catch (error) {
      this.logger.error(`Erro ao registrar bloqueio para post ${postCode}: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
    }
  }
} 