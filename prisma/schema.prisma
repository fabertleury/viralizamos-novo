// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("MONITORING_DATABASE_URL")
}

// Tabela de log de transações
model TransactionsLog {
  id            String   @id
  payment_id    String?
  status        String?
  amount        Decimal? @db.Decimal(10, 2)
  created_at    DateTime
  metadata      Json?
  provider_data Json?
  logged_at     DateTime @default(now())

  @@index([payment_id])
  @@index([status])
  @@map("transactions_log")
}

// Tabela de log de pedidos
model OrdersLog {
  id                String   @id
  transaction_id    String?
  provider_id       String?
  service_id        String?
  quantity          Int?
  status            String?
  target_url        String?  @db.Text
  created_at        DateTime
  provider_response Json?
  logged_at         DateTime @default(now())

  @@index([transaction_id])
  @@index([provider_id])
  @@index([target_url])
  @@map("orders_log")
}

// Tabela de log de integrações
model IntegrationsLog {
  id             Int      @id @default(autoincrement())
  order_id       String?
  transaction_id String?
  provider_id    String?
  request_data   Json?
  response_data  Json?
  status         String?
  error_message  String?  @db.Text
  created_at     DateTime @default(now())

  @@index([order_id])
  @@index([transaction_id])
  @@map("integrations_log")
}

// Tabela para rastreamento de webhooks
model WebhookLogs {
  id              Int      @id @default(autoincrement())
  webhook_type    String
  source          String
  payload         Json
  processed       Boolean  @default(false)
  status_code     Int?
  response_body   Json?
  processing_time Int?     // Tempo em ms
  received_at     DateTime @default(now())
  processed_at    DateTime?

  @@index([webhook_type])
  @@index([processed])
  @@map("webhook_logs")
}

// Tabela para detecção de duplicação
model DuplicateDetection {
  id             Int      @id @default(autoincrement())
  hash_key       String   @unique // Hash da combinação de detalhes do pedido
  transaction_id String
  order_id       String?
  target_url     String?  @db.Text
  service_id     String?
  provider_id    String?
  first_seen     DateTime @default(now())
  last_seen      DateTime @default(now())
  count          Int      @default(1)

  @@index([hash_key])
  @@map("duplicate_detection")
}

// Tabela de notificações para o painel administrativo
model AdminNotifications {
  id            String   @id @default(uuid())
  type          String
  title         String
  message       String
  reference_id  String?
  transaction_id String?
  status        String   @default("pending")
  priority      String   @default("low")
  metadata      Json?
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())

  @@index([type])
  @@index([status])
  @@index([transaction_id])
  @@map("admin_notifications")
}

// Tabela para fila de pedidos no painel de administração
model OrderQueue {
  id                     String    @id @default(uuid())
  transaction_id         String
  service_id             String
  provider_id            String
  post_code              String?
  post_url               String?   @db.Text
  status                 String
  priority               Int       @default(0)
  attempts               Int       @default(0)
  max_attempts           Int       @default(3)
  scheduled_for          DateTime  @default(now())
  processed_at           DateTime?
  error_message          String?   @db.Text
  created_at             DateTime  @default(now())
  updated_at             DateTime  @default(now())

  @@index([status])
  @@index([transaction_id])
  @@index([scheduled_for])
  @@map("order_queue")
}
